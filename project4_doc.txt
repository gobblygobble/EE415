       	       	     +-------------------------+
		     |		EE 415	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jehyeon Bang <bangjh0430@kaist.ac.kr>
Jinha Chung <gobblygobble@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
We submit with VM enabled: 100.9%
cf) with VM disabled, we get 100.0%.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Nope!

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not include any new structures for indexed and extensible file supporting.
However, we did change struct inode_disk to the following:
struct inode_disk
  {
    off_t length;                       /* File size in bytes.  */
    block_sector_t direct[12];          /* Direct blocks. */
    block_sector_t indirect;            /* Singly indirect blocks. */
    block_sector_t doubly_indirect;     /* Doubly indirect blocks. */
    uint32_t is_dir;                    /* 1: directory; 0: file */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[111];               /* Not used. *
  };

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

Our file size is limited to around 8MB:
	12 * 512 + (512 / 4) * 512 + (512 / 4) * (512 / 4) * 512 = 8460288
	= a little over 8MB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We used locks to synchronize files.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

We did not implement buffer cache, and thus this problem does not happen.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

When a process has a file open, it does NOT put any locks on it.
Only when it tries to read (or write to) a file does it put a lock to manage race conditions. Thus, as long as a file does not 'write' or 'read' forever, the other process trying to access the file will eventually get a chance to read (or write to) the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes. Our struct inode_disk consists of 12 direct blocks, 1 indirect block, and 1 doubly indirect block.
We used multi-level indexing, because it allows us to support a wider range of file sizes using the same inode_disk size, and to support up to 8MB as mentioned in the project, we needed at least one doubly indirect block.
However, indexing using doubly indirect (or just indirect) blocks is slower than indexing using direct blocks. Thus, we have added 12 direct blocks and one singly indirect block instead of using only doubly indirect blocks, to support faster speed for small-size files.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We have added one new structure to treat file and directories similarly:

  struct fsys {
    bool is_dir;
    struct file *file;
    struct dir *dir;
  };

Also, in struct thread, we added "struct dir* cur_dir" to check which directory we are currently in.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

When a path is absolute, it starts with a '/'.
We use this to diffrentiate between an absolute path and a relative one.
We then use strrchr function from the string library to find where the last '/' in the given path was.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

When we create or remove a file, we put locks around them to force synchronization.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No, we don't allow it. When a directory we try to remove is open or not empty, we reject the attempt to do so. We check the open counts and files in the directory to see if it is open or in use.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

In struct thread, we added a struct dir pointer cur_dir, so that we can always check if some directory we're working on is the current directory or not.
As long as we changed cur_dir to the right directory when we called chdir, we could always easily check which directory we're in, without running into other problems.

			     BUFFER CACHE
			     ============
** WE DID NOT IMPLEMENT BUFFER CACHE **
---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
