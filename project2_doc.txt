		     +--------------------------+
       	       	     |		EE 415		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jehyeon Bang bangjh0430@kaist.ac.kr
Jinha Chung gobblygobble@kaist.ac.kr
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None for argument passing.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We used strtok_r () to change all spaces to '\0'. While doing so, we saved all the
argument tokens' starting address on file_name in start_process ().
And while we copy the tokens into stack with strlcpy (), we keep updating
the args[] array indices to the stack addresses.
Afterwards, after word-aligning and pushing 0 into argv[argc], we pushed the addresses
stored in args[], so that the order would fit.
In the end, of course, we pushed in the argv address, argc, and a fake return address.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

By using strtok_r (), we may call the functions from multiple threads simultaneously,
thus being able to call this function without taking into account synchronization
problems that may arise while using this function.
(From strtok manual and stackoverflow site)

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

First, parsing arguments in shell is generally faster than parsing in the kernel.
Second, 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

@ threads/thread.h:
	@ struct child (new struct):
	{
		tid_t child_tid:
			pid of child thread
		struct list_elem elem:
			make struct child listable
		struct semaphore sema:
			semaphore for this child's parent's wait ()
		int status:
			child's return status
	}


	@ struct thread (between #ifdef USERPROG and #endif):
	{	
		struct file *fd_table[MAX_FD]:
			file descriptor table, MAX_FD is defined in thread.h as 128.
		tid_t parent_t:
			parent thread's tid
		struct semaphore parent_sema:
			semaphore, used to prevent child thread from exiting
			before parent has the child thread's information.
		struct semaphore loaded:
			semaphore, used to prevent parent's process_execute ()
			returning before child loads its executable.
		struct list child_list:
			list of struct child
		struct child child_info:
			struct child in thread
	}	

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique integers associated with files.
In our implementation, fd_table in struct table both maps and helps link 
the fd with the index of fd_table.
While 0 and 1 are reserved for strin and stdout, respectively.
The rest of the fd (2 to 127 in our implementation) are unique
within a single process, because it is stored in struct thread.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

When an interrupt is issued, we are given the interrupt frame of the process
that was interrupted.
In here we have the esp of the process, so that we can access the stack
of the process that was running before the current one.
We may also access the eax register in the interrupt frame, so we are able
to 'return' a value to the previous process, in functions that do not 'return',
like exit () that needs to store its status, but is not suppoed to actually return.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We ensured proper sycnrhonization by the use of semaphores.
If P calls wait (C) before C exits, P tries to sema_down on a 0-value semaphore,
therefore going to sleep.
It is woken up when C calls sema_up () right before it exits completely.
If it is called after C exits, P tries to sema_down on a 1-value semaphore.
Then nothing special happens and wait () returns.
All resources are ensured to be freed properly, because exit () takes care of them.



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We have a number limit of 128 (126 excluding stdin and stdout) on the
maximum number of files opened at once. Also, it may take up more space
than may need to.
However, the implementation of this array-based is easy, and
is much faster in fetching the file from the given fd than a list-based approach.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We left them untouched.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
